'''
    File name: Chip8Emulator.py
    Author: Isaiah Johnson
    Date created: 3/23/2020
    Python Version: 3.8
'''

import tkinter
import time
import math
SCALE = 8
X = 64*SCALE
Y = 32*SCALE

window = tkinter.Tk()
window.title("Chip8 Emulator")
window.geometry = ("%dx%d"%(X,Y))
window.config(bg='#000')

canvas = tkinter.Canvas(window, bg="#000", height = Y, width = X)
canvas.pack()


pong = [0x6A, 0x02, 0x6B, 0x0C, 0x6C, 0x3F, 0x6D, 0x0C, 0xA2, 0xEA,
        0xDA, 0xB6, 0xDC, 0xD6, 0x6E, 0x00, 0x22, 0xD4, 0x66, 0x03,
        0x68, 0x02, 0x60, 0x60, 0xF0, 0x15, 0xF0, 0x07, 0x30, 0x00,
        0x12, 0x1A, 0xC7, 0x17, 0x77, 0x08, 0x69, 0xFF, 0xA2, 0xF0,
        0xD6, 0x71, 0xA2, 0xEA, 0xDA, 0xB6, 0xDC, 0xD6, 0x60, 0x01,
        0xE0, 0xA1, 0x7B, 0xFE, 0x60, 0x04, 0xE0, 0xA1, 0x7B, 0x02,
        0x60, 0x1F, 0x8B, 0x02, 0xDA, 0xB6, 0x60, 0x0C, 0xE0, 0xA1,
        0x7D, 0xFE, 0x60, 0x0D, 0xE0, 0xA1, 0x7D, 0x02, 0x60, 0x1F,
        0x8D, 0x02, 0xDC, 0xD6, 0xA2, 0xF0, 0xD6, 0x71, 0x86, 0x84,
        0x87, 0x94, 0x60, 0x3F, 0x86, 0x02, 0x61, 0x1F, 0x87, 0x12,
        0x46, 0x02, 0x12, 0x78, 0x46, 0x3F, 0x12, 0x82, 0x47, 0x1F,
        0x69, 0xFF, 0x47, 0x00, 0x69, 0x01, 0xD6, 0x71, 0x12, 0x2A,
        0x68, 0x02, 0x63, 0x01, 0x80, 0x70, 0x80, 0xB5, 0x12, 0x8A,
        0x68, 0xFE, 0x63, 0x0A, 0x80, 0x70, 0x80, 0xD5, 0x3F, 0x01,
        0x12, 0xA2, 0x61, 0x02, 0x80, 0x15, 0x3F, 0x01, 0x12, 0xBA,
        0x80, 0x15, 0x3F, 0x01, 0x12, 0xC8, 0x80, 0x15, 0x3F, 0x01,
        0x12, 0xC2, 0x60, 0x20, 0xF0, 0x18, 0x22, 0xD4, 0x8E, 0x34,
        0x22, 0xD4, 0x66, 0x3E, 0x33, 0x01, 0x66, 0x03, 0x68, 0xFE,
        0x33, 0x01, 0x68, 0x02, 0x12, 0x16, 0x79, 0xFF, 0x49, 0xFE,
        0x69, 0xFF, 0x12, 0xC8, 0x79, 0x01, 0x49, 0x02, 0x69, 0x01,
        0x60, 0x04, 0xF0, 0x18, 0x76, 0x01, 0x46, 0x40, 0x76, 0xFE,
        0x12, 0x6C, 0xA2, 0xF2, 0xFE, 0x33, 0xF2, 0x65, 0xF1, 0x29,
        0x64, 0x14, 0x65, 0x00, 0xD4, 0x55, 0x74, 0x15, 0xF2, 0x29,
        0xD4, 0x55, 0x00, 0xEE, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
        0x80, 0x00, 0x00, 0x00, 0x00, 0x00]

invaders = [0x12, 0x25, 0x53, 0x50, 0x41, 0x43, 0x45, 0x20, 0x49, 0x4E, 0x56, 0x41, 0x44, 0x45, 0x52, 0x53, 0x20, 0x76, 0x30, 0x2E, 0x39, 0x20, 0x42, 0x79, 0x20, 0x44, 0x61, 0x76, 0x69, 0x64, 0x20, 0x57, 0x49, 0x4E, 0x54, 0x45, 0x52, 0x60, 0x00, 0x61, 0x00, 0x62, 0x08, 0xA3, 0xD3, 0xD0, 0x18, 0x71, 0x08, 0xF2, 0x1E, 0x31, 0x20, 0x12, 0x2D, 0x70, 0x08, 0x61, 0x00, 0x30, 0x40, 0x12, 0x2D, 0x69, 0x05, 0x6C, 0x15, 0x6E, 0x00, 0x23, 0x87, 0x60, 0x0A, 0xF0, 0x15, 0xF0, 0x07, 0x30, 0x00, 0x12, 0x4B, 0x23, 0x87, 0x7E, 0x01, 0x12, 0x45, 0x66, 0x00, 0x68, 0x1C, 0x69, 0x00, 0x6A, 0x04, 0x6B, 0x0A, 0x6C, 0x04, 0x6D, 0x3C, 0x6E, 0x0F, 0x00, 0xE0, 0x23, 0x6B, 0x23, 0x47, 0xFD, 0x15, 0x60, 0x04, 0xE0, 0x9E, 0x12, 0x7D, 0x23, 0x6B, 0x38, 0x00, 0x78, 0xFF, 0x23, 0x6B, 0x60, 0x06, 0xE0, 0x9E, 0x12, 0x8B, 0x23, 0x6B, 0x38, 0x39, 0x78, 0x01, 0x23, 0x6B, 0x36, 0x00, 0x12, 0x9F, 0x60, 0x05, 0xE0, 0x9E, 0x12, 0xE9, 0x66, 0x01, 0x65, 0x1B, 0x84, 0x80, 0xA3, 0xCF, 0xD4, 0x51, 0xA3, 0xCF, 0xD4, 0x51, 0x75, 0xFF, 0x35, 0xFF, 0x12, 0xAD, 0x66, 0x00, 0x12, 0xE9, 0xD4, 0x51, 0x3F, 0x01, 0x12, 0xE9, 0xD4, 0x51, 0x66, 0x00, 0x83, 0x40, 0x73, 0x03, 0x83, 0xB5, 0x62, 0xF8, 0x83, 0x22, 0x62, 0x08, 0x33, 0x00, 0x12, 0xC9, 0x23, 0x73, 0x82, 0x06, 0x43, 0x08, 0x12, 0xD3, 0x33, 0x10, 0x12, 0xD5, 0x23, 0x73, 0x82, 0x06, 0x33, 0x18, 0x12, 0xDD, 0x23, 0x73, 0x82, 0x06, 0x43, 0x20, 0x12, 0xE7, 0x33, 0x28, 0x12, 0xE9, 0x23, 0x73, 0x3E, 0x00, 0x13, 0x07, 0x79, 0x06, 0x49, 0x18, 0x69, 0x00, 0x6A, 0x04, 0x6B, 0x0A, 0x6C, 0x04, 0x7D, 0xF4, 0x6E, 0x0F, 0x00, 0xE0, 0x23, 0x47, 0x23, 0x6B, 0xFD, 0x15, 0x12, 0x6F, 0xF7, 0x07, 0x37, 0x00, 0x12, 0x6F, 0xFD, 0x15, 0x23, 0x47, 0x8B, 0xA4, 0x3B, 0x12, 0x13, 0x1B, 0x7C, 0x02, 0x6A, 0xFC, 0x3B, 0x02, 0x13, 0x23, 0x7C, 0x02, 0x6A, 0x04, 0x23, 0x47, 0x3C, 0x18, 0x12, 0x6F, 0x00, 0xE0, 0xA4, 0xD3, 0x60, 0x14, 0x61, 0x08, 0x62, 0x0F, 0xD0, 0x1F, 0x70, 0x08, 0xF2, 0x1E, 0x30, 0x2C, 0x13, 0x33, 0xF0, 0x0A, 0x00, 0xE0, 0xA6, 0xF4, 0xFE, 0x65, 0x12, 0x25, 0xA3, 0xB7, 0xF9, 0x1E, 0x61, 0x08, 0x23, 0x5F, 0x81, 0x06, 0x23, 0x5F, 0x81, 0x06, 0x23, 0x5F, 0x81, 0x06, 0x23, 0x5F, 0x7B, 0xD0, 0x00, 0xEE, 0x80, 0xE0, 0x80, 0x12, 0x30, 0x00, 0xDB, 0xC6, 0x7B, 0x0C, 0x00, 0xEE, 0xA3, 0xCF, 0x60, 0x1C, 0xD8, 0x04, 0x00, 0xEE, 0x23, 0x47, 0x8E, 0x23, 0x23, 0x47, 0x60, 0x05, 0xF0, 0x18, 0xF0, 0x15, 0xF0, 0x07, 0x30, 0x00, 0x13, 0x7F, 0x00, 0xEE, 0x6A, 0x00, 0x8D, 0xE0, 0x6B, 0x04, 0xE9, 0xA1, 0x12, 0x57, 0xA6, 0x02, 0xFD, 0x1E, 0xF0, 0x65, 0x30, 0xFF, 0x13, 0xA5, 0x6A, 0x00, 0x6B, 0x04, 0x6D, 0x01, 0x6E, 0x01, 0x13, 0x8D, 0xA5, 0x00, 0xF0, 0x1E, 0xDB, 0xC6, 0x7B, 0x08, 0x7D, 0x01, 0x7A, 0x01, 0x3A, 0x07, 0x13, 0x8D, 0x00, 0xEE, 0x3C, 0x7E, 0xFF, 0xFF, 0x99, 0x99, 0x7E, 0xFF, 0xFF, 0x24, 0x24, 0xE7, 0x7E, 0xFF, 0x3C, 0x3C, 0x7E, 0xDB, 0x81, 0x42, 0x3C, 0x7E, 0xFF, 0xDB, 0x10, 0x38, 0x7C, 0xFE, 0x00, 0x00, 0x7F, 0x00, 0x3F, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x3F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3F, 0x08, 0x08, 0xFF, 0x00, 0x00, 0xFE, 0x00, 0xFC, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x7E, 0x42, 0x42, 0x62, 0x62, 0x62, 0x62, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x7D, 0x00, 0x41, 0x7D, 0x05, 0x7D, 0x7D, 0x00, 0x00, 0xC2, 0xC2, 0xC6, 0x44, 0x6C, 0x28, 0x38, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x10, 0x14, 0xF7, 0xF7, 0x04, 0x04, 0x00, 0x00, 0x7C, 0x44, 0xFE, 0xC2, 0xC2, 0xC2, 0xC2, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xEF, 0x20, 0x28, 0xE8, 0xE8, 0x2F, 0x2F, 0x00, 0x00, 0xF9, 0x85, 0xC5, 0xC5, 0xC5, 0xC5, 0xF9, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xBE, 0x00, 0x20, 0x30, 0x20, 0xBE, 0xBE, 0x00, 0x00, 0xF7, 0x04, 0xE7, 0x85, 0x85, 0x84, 0xF4, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x7F, 0x00, 0x3F, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xEF, 0x28, 0xEF, 0x00, 0xE0, 0x60, 0x6F, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFE, 0x00, 0xFC, 0x00, 0xFE, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0xFC, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0xFC, 0x10, 0x10, 0xFF, 0xF9, 0x81, 0xB9, 0x8B, 0x9A, 0x9A, 0xFA, 0x00, 0xFA, 0x8A, 0x9A, 0x9A, 0x9B, 0x99, 0xF8, 0xE6, 0x25, 0x25, 0xF4, 0x34, 0x34, 0x34, 0x00, 0x17, 0x14, 0x34, 0x37, 0x36, 0x26, 0xC7, 0xDF, 0x50, 0x50, 0x5C, 0xD8, 0xD8, 0xDF, 0x00, 0xDF, 0x11, 0x1F, 0x12, 0x1B, 0x19, 0xD9, 0x7C, 0x44, 0xFE, 0x86, 0x86, 0x86, 0xFC, 0x84, 0xFE, 0x82, 0x82, 0xFE, 0xFE, 0x80, 0xC0, 0xC0, 0xC0, 0xFE, 0xFC, 0x82, 0xC2, 0xC2, 0xC2, 0xFC, 0xFE, 0x80, 0xF8, 0xC0, 0xC0, 0xFE, 0xFE, 0x80, 0xF0, 0xC0, 0xC0, 0xC0, 0xFE, 0x80, 0xBE, 0x86, 0x86, 0xFE, 0x86, 0x86, 0xFE, 0x86, 0x86, 0x86, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x18, 0x18, 0x18, 0x48, 0x48, 0x78, 0x9C, 0x90, 0xB0, 0xC0, 0xB0, 0x9C, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xFE, 0xEE, 0x92, 0x92, 0x86, 0x86, 0x86, 0xFE, 0x82, 0x86, 0x86, 0x86, 0x86, 0x7C, 0x82, 0x86, 0x86, 0x86, 0x7C, 0xFE, 0x82, 0xFE, 0xC0, 0xC0, 0xC0, 0x7C, 0x82, 0xC2, 0xCA, 0xC4, 0x7A, 0xFE, 0x86, 0xFE, 0x90, 0x9C, 0x84, 0xFE, 0xC0, 0xFE, 0x02, 0x02, 0xFE, 0xFE, 0x10, 0x30, 0x30, 0x30, 0x30, 0x82, 0x82, 0xC2, 0xC2, 0xC2, 0xFE, 0x82, 0x82, 0x82, 0xEE, 0x38, 0x10, 0x86, 0x86, 0x96, 0x92, 0x92, 0xEE, 0x82, 0x44, 0x38, 0x38, 0x44, 0x82, 0x82, 0x82, 0xFE, 0x30, 0x30, 0x30, 0xFE, 0x02, 0x1E, 0xF0, 0x80, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x7C, 0xC6, 0x0C, 0x18, 0x00, 0x18, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0xFE, 0x82, 0x86, 0x86, 0x86, 0xFE, 0x08, 0x08, 0x08, 0x18, 0x18, 0x18, 0xFE, 0x02, 0xFE, 0xC0, 0xC0, 0xFE, 0xFE, 0x02, 0x1E, 0x06, 0x06, 0xFE, 0x84, 0xC4, 0xC4, 0xFE, 0x04, 0x04, 0xFE, 0x80, 0xFE, 0x06, 0x06, 0xFE, 0xC0, 0xC0, 0xC0, 0xFE, 0x82, 0xFE, 0xFE, 0x02, 0x02, 0x06, 0x06, 0x06, 0x7C, 0x44, 0xFE, 0x86, 0x86, 0xFE, 0xFE, 0x82, 0xFE, 0x06, 0x06, 0x06, 0x44, 0xFE, 0x44, 0x44, 0xFE, 0x44, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0x6C, 0x5A, 0x00, 0x0C, 0x18, 0xA8, 0x30, 0x4E, 0x7E, 0x00, 0x12, 0x18, 0x66, 0x6C, 0xA8, 0x5A, 0x66, 0x54, 0x24, 0x66, 0x00, 0x48, 0x48, 0x18, 0x12, 0xA8, 0x06, 0x90, 0xA8, 0x12, 0x00, 0x7E, 0x30, 0x12, 0xA8, 0x84, 0x30, 0x4E, 0x72, 0x18, 0x66, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0x90, 0x54, 0x78, 0xA8, 0x48, 0x78, 0x6C, 0x72, 0xA8, 0x12, 0x18, 0x6C, 0x72, 0x66, 0x54, 0x90, 0xA8, 0x72, 0x2A, 0x18, 0xA8, 0x30, 0x4E, 0x7E, 0x00, 0x12, 0x18, 0x66, 0x6C, 0xA8, 0x72, 0x54, 0xA8, 0x5A, 0x66, 0x18, 0x7E, 0x18, 0x4E, 0x72, 0xA8, 0x72, 0x2A, 0x18, 0x30, 0x66, 0xA8, 0x30, 0x4E, 0x7E, 0x00, 0x6C, 0x30, 0x54, 0x4E, 0x9C, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0x48, 0x54, 0x7E, 0x18, 0xA8, 0x90, 0x54, 0x78, 0x66, 0xA8, 0x6C, 0x2A, 0x30, 0x5A, 0xA8, 0x84, 0x30, 0x72, 0x2A, 0xA8, 0xD8, 0xA8, 0x00, 0x4E, 0x12, 0xA8, 0xE4, 0xA2, 0xA8, 0x00, 0x4E, 0x12, 0xA8, 0x6C, 0x2A, 0x54, 0x54, 0x72, 0xA8, 0x84, 0x30, 0x72, 0x2A, 0xA8, 0xDE, 0x9C, 0xA8, 0x72, 0x2A, 0x18, 0xA8, 0x0C, 0x54, 0x48, 0x5A, 0x78, 0x72, 0x18, 0x66, 0xA8, 0x72, 0x18, 0x42, 0x42, 0x6C, 0xA8, 0x72, 0x2A, 0x00, 0x72, 0xA8, 0x72, 0x2A, 0x18, 0xA8, 0x30, 0x4E, 0x7E, 0x00, 0x12, 0x18, 0x66, 0x6C, 0xA8, 0x30, 0x4E, 0x0C, 0x66, 0x18, 0x00, 0x6C, 0x18, 0xA8, 0x72, 0x2A, 0x18, 0x30, 0x66, 0xA8, 0x1E, 0x54, 0x66, 0x0C, 0x18, 0x9C, 0xA8, 0x24, 0x54, 0x54, 0x12, 0xA8, 0x42, 0x78, 0x0C, 0x3C, 0xA8, 0xAE, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xA8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

test = [0x00, 0xE0, 0x63, 0x00, 0x64, 0x01, 0x65, 0xEE, 0x35, 0xEE, 0x13, 0x10, 0x63, 0x00, 0x64, 0x02, 0x65, 0xEE, 0x66, 0xEE, 0x55, 0x60, 0x13, 0x10, 0x63, 0x00, 0x64, 0x03, 0x65, 0xEE, 0x45, 0xFD, 0x13, 0x10, 0x63, 0x00, 0x64, 0x04, 0x65, 0xEE, 0x75, 0x01, 0x35, 0xEF, 0x13, 0x10, 0x63, 0x00, 0x64, 0x05, 0x6F, 0x01, 0x65, 0xEE, 0x66, 0xEF, 0x85, 0x65, 0x3F, 0x00, 0x13, 0x10, 0x63, 0x00, 0x64, 0x06, 0x6F, 0x00, 0x65, 0xEF, 0x66, 0xEE, 0x85, 0x65, 0x3F, 0x01, 0x13, 0x10, 0x6F, 0x00, 0x63, 0x00, 0x64, 0x07, 0x65, 0xEE, 0x66, 0xEF, 0x85, 0x67, 0x3F, 0x01, 0x13, 0x10, 0x63, 0x00, 0x64, 0x08, 0x6F, 0x01, 0x65, 0xEF, 0x66, 0xEE, 0x85, 0x67, 0x3F, 0x00, 0x13, 0x10, 0x63, 0x00, 0x64, 0x09, 0x65, 0xF0, 0x66, 0x0F, 0x85, 0x61, 0x35, 0xFF, 0x13, 0x10, 0x63, 0x01, 0x64, 0x00, 0x65, 0xF0, 0x66, 0x0F, 0x85, 0x62, 0x35, 0x00, 0x13, 0x10, 0x63, 0x01, 0x64, 0x01, 0x65, 0xF0, 0x66, 0x0F, 0x85, 0x63, 0x35, 0xFF, 0x13, 0x10, 0x6F, 0x00, 0x63, 0x01, 0x64, 0x02, 0x65, 0x81, 0x85, 0x0E, 0x3F, 0x01, 0x13, 0x10, 0x63, 0x01, 0x64, 0x03, 0x6F, 0x01, 0x65, 0x47, 0x85, 0x0E, 0x3F, 0x00, 0x13, 0x10, 0x63, 0x01, 0x64, 0x04, 0x6F, 0x00, 0x65, 0x01, 0x85, 0x06, 0x3F, 0x01, 0x13, 0x10, 0x63, 0x01, 0x64, 0x05, 0x6F, 0x01, 0x65, 0x02, 0x85, 0x06, 0x3F, 0x00, 0x13, 0x10, 0x63, 0x01, 0x64, 0x06, 0x60, 0x15, 0x61, 0x78, 0xA3, 0xD0, 0xF1, 0x55, 0xF1, 0x65, 0x30, 0x15, 0x13, 0x10, 0x31, 0x78, 0x13, 0x10, 0x63, 0x01, 0x64, 0x07, 0x60, 0x8A, 0xA3, 0xD0, 0xF0, 0x33, 0xA3, 0xD0, 0xF0, 0x65, 0x30, 0x01, 0x13, 0x10, 0x60, 0x01, 0xF0, 0x1E, 0xF0, 0x65, 0x30, 0x03, 0x13, 0x10, 0x60, 0x01, 0xF0, 0x1E, 0xF0, 0x65, 0x30, 0x08, 0x13, 0x10, 0x13, 0x32, 0x13, 0x0E, 0xA3, 0x2A, 0x60, 0x13, 0x61, 0x09, 0xD0, 0x18, 0xF3, 0x29, 0x60, 0x22, 0x61, 0x0B, 0xD0, 0x15, 0xF4, 0x29, 0x60, 0x28, 0x61, 0x0B, 0xD0, 0x15, 0x13, 0x0E, 0xFF, 0xF0, 0xF0, 0xFF, 0xF0, 0xF0, 0xF0, 0xFF, 0xA3, 0x58, 0x60, 0x15, 0x61, 0x0B, 0x63, 0x08, 0xD0, 0x18, 0x70, 0x08, 0xF3, 0x1E, 0x30, 0x2D, 0x13, 0x3A, 0xA3, 0x70, 0x60, 0x02, 0x61, 0x18, 0x63, 0x08, 0xD0, 0x18, 0x70, 0x05, 0xF3, 0x1E, 0x30, 0x3E, 0x13, 0x4C, 0x13, 0x0E, 0xF0, 0x88, 0x88, 0xF0, 0x88, 0x88, 0x88, 0xF0, 0x78, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x78, 0x84, 0xC4, 0xA4, 0x94, 0x8C, 0x84, 0x84, 0x84, 0xC0, 0xA0, 0xA0, 0xC0, 0xA0, 0xA0, 0xC0, 0x00, 0x00, 0x00, 0xA0, 0xA0, 0xE0, 0x20, 0x20, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xA0, 0xA0, 0xC0, 0xA0, 0xA0, 0xC0, 0x00, 0x00, 0x00, 0x60, 0xA0, 0xC0, 0x80, 0x60, 0x00, 0x00, 0x00, 0x60, 0x80, 0x40, 0x20, 0xC0, 0x00, 0x80, 0x80, 0xC0, 0x80, 0x80, 0x80, 0x60, 0x00, 0xE0, 0x80, 0x80, 0x80, 0x80, 0x80, 0xE0, 0x00, 0x00, 0x00, 0x40, 0xA0, 0xA0, 0xA0, 0x40, 0x00, 0x20, 0x20, 0x20, 0x60, 0xA0, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x60, 0xA0, 0xC0, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 0x60, 0x40, 0x40, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

test2 = [0x12, 0x4E, 0xEA, 0xAC, 0xAA, 0xEA, 0xCE, 0xAA, 0xAA, 0xAE, 0xE0, 0xA0, 0xA0, 0xE0, 0xC0, 0x40, 0x40, 0xE0, 0xE0, 0x20, 0xC0, 0xE0, 0xE0, 0x60, 0x20, 0xE0, 0xA0, 0xE0, 0x20, 0x20, 0x60, 0x40, 0x20, 0x40, 0xE0, 0x80, 0xE0, 0xE0, 0xE0, 0x20, 0x20, 0x20, 0xE0, 0xE0, 0xA0, 0xE0, 0xE0, 0xE0, 0x20, 0xE0, 0x40, 0xA0, 0xE0, 0xA0, 0xE0, 0xC0, 0x80, 0xE0, 0xE0, 0x80, 0xC0, 0x80, 0xA0, 0x40, 0xA0, 0xA0, 0xA2, 0x02, 0xDA, 0xB4, 0x00, 0xEE, 0xA2, 0x02, 0xDA, 0xB4, 0x13, 0xDC, 0x68, 0x01, 0x69, 0x05, 0x6A, 0x0A, 0x6B, 0x01, 0x65, 0x2A, 0x66, 0x2B, 0xA2, 0x16, 0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0xA2, 0x02, 0x36, 0x2B, 0xA2, 0x06, 0xDA, 0xB4, 0x6B, 0x06, 0xA2, 0x1A, 0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0xA2, 0x06, 0x45, 0x2A, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x0B, 0xA2, 0x1E, 0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0xA2, 0x06, 0x55, 0x60, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x10, 0xA2, 0x26, 0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0xA2, 0x06, 0x76, 0xFF, 0x46, 0x2A, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x15, 0xA2, 0x2E, 0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0xA2, 0x06, 0x95, 0x60, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x1A, 0xA2, 0x32, 0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0x22, 0x42, 0x68, 0x17, 0x69, 0x1B, 0x6A, 0x20, 0x6B, 0x01, 0xA2, 0x0A, 0xD8, 0xB4, 0xA2, 0x36, 0xD9, 0xB4, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x06, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x0A, 0xD9, 0xB4, 0xA2, 0x06, 0x87, 0x50, 0x47, 0x2A, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x0B, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x0E, 0xD9, 0xB4, 0xA2, 0x06, 0x67, 0x2A, 0x87, 0xB1, 0x47, 0x2B, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x10, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x12, 0xD9, 0xB4, 0xA2, 0x06, 0x66, 0x78, 0x67, 0x1F, 0x87, 0x62, 0x47, 0x18, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x15, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x16, 0xD9, 0xB4, 0xA2, 0x06, 0x66, 0x78, 0x67, 0x1F, 0x87, 0x63, 0x47, 0x67, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x1A, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x1A, 0xD9, 0xB4, 0xA2, 0x06, 0x66, 0x8C, 0x67, 0x8C, 0x87, 0x64, 0x47, 0x18, 0xA2, 0x02, 0xDA, 0xB4, 0x68, 0x2C, 0x69, 0x30, 0x6A, 0x34, 0x6B, 0x01, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x1E, 0xD9, 0xB4, 0xA2, 0x06, 0x66, 0x8C, 0x67, 0x78, 0x87, 0x65, 0x47, 0xEC, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x06, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x22, 0xD9, 0xB4, 0xA2, 0x06, 0x66, 0xE0, 0x86, 0x6E, 0x46, 0xC0, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x0B, 0xA2, 0x2A, 0xD8, 0xB4, 0xA2, 0x36, 0xD9, 0xB4, 0xA2, 0x06, 0x66, 0x0F, 0x86, 0x66, 0x46, 0x07, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x10, 0xA2, 0x3A, 0xD8, 0xB4, 0xA2, 0x1E, 0xD9, 0xB4, 0xA3, 0xE8, 0x60, 0x00, 0x61, 0x30, 0xF1, 0x55, 0xA3, 0xE9, 0xF0, 0x65, 0xA2, 0x06, 0x40, 0x30, 0xA2, 0x02, 0xDA, 0xB4, 0x6B, 0x15, 0xA2, 0x3A, 0xD8, 0xB4, 0xA2, 0x16, 0xD9, 0xB4, 0xA3, 0xE8, 0x66, 0x89, 0xF6, 0x33, 0xF2, 0x65, 0xA2, 0x02, 0x30, 0x01, 0xA2, 0x06, 0x31, 0x03, 0xA2, 0x06, 0x32, 0x07, 0xA2, 0x06, 0xDA, 0xB4, 0x6B, 0x1A, 0xA2, 0x0E, 0xD8, 0xB4, 0xA2, 0x3E, 0xD9, 0xB4, 0x12, 0x48, 0x13, 0xDC]

DEFAULT_FONT = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, # 0
    0x20, 0x60, 0x20, 0x20, 0x70, # 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, # 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, # 3
    0x90, 0x90, 0xF0, 0x10, 0x10, # 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, # 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, # 6
    0xF0, 0x10, 0x20, 0x40, 0x40, # 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, # 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, # 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, # A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, # B
    0xF0, 0x80, 0x80, 0x80, 0xF0, # C
    0xE0, 0x90, 0x90, 0x90, 0xE0, # D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, # E
    0xF0, 0x80, 0xF0, 0x80, 0x80]  # F

class Chip8Emulator:
    def __init__(self):
        self.memory = []
        self.v = []
        self.i = 0x0
        self.pc = 0x200
        self.stack = []
        self.sp = 0x0
        self.opCode = 0x0
        self.isRunning = True
        self.clockSpeed = 1
        self.debugMode = True
        self.spriteData = []
        self.dT = 0x0
        for _ in range(4096):
            self.memory.append(0x0)
        for _ in range(16):
            self.v.append(0x0)
        for i in range(len(DEFAULT_FONT)):
            self.memory[0x050+i] = DEFAULT_FONT[i]
        self.pixels = []

        for y in range(Y):
            row = []
            for x in range(X):
                row.append([canvas.create_rectangle(x*SCALE,y*SCALE,(x+1)*SCALE,(y+1)*SCALE), 0])
            self.pixels.append(row)

    def loadROM(self, rom):
        for i in range(len(rom)):
            self.memory[self.pc+i] = rom[i]

    def emulateCycle(self):
        opCodeA = self.memory[self.pc]
        opCodeB = self.memory[self.pc+1]
        self.opCode = int(opCodeA) << 8 | int(opCodeB)

        opA = self.opCode & 0xF000
        opB = (self.opCode & 0x0F00) >> 8
        opC = (self.opCode & 0x00F0) >> 4
        opD = self.opCode & 0x000F
        if(opA == 0x0000):
            if(self.opCode & 0x00FF == 0x00EE):
                self.ret()
            elif(opC == 0xE):
                self.clr()
        elif(opA == 0x1000):
            self.jmp(self.opCode & 0x0FFF)
        elif(opA == 0x2000):
            self.call(self.opCode & 0x0FFF)
        elif(opA == 0x3000):
            self.sex(opB, self.opCode&0x00FF)
        elif(opA == 0x4000):
            self.sne(opB, self.opCode&0x00FF)
        elif(opA == 0x5000):
            self.se(opB, opC)
        elif(opA == 0x6000):
            self.movL(opB, self.opCode&0x00FF)
        elif(opA == 0x7000):
            self.add(opB, self.opCode & 0x00FF)
        elif(opA == 0x8000):
            if(opD == 0x0001):
                self.orx(opB, opC)
        #    elif(opD == 0x0002):
                #self.andx()
            elif(opD == 0x0005):
                self.sub(opB, opC)
            elif(opD == 0x0007):
                self.subn(opB, opC)
        elif(opA == 0xA000):
            self.loadI(self.opCode&0x0FFF)
        elif(opA == 0xD000):
            self.sprite(opB, opC, opD)
        elif(opA == 0xF000):
            opCD = self.opCode & 0x00FF
            if(opCD == 0x0007):
                self.loadXDT(opB)
            if(opCD == 0x0015):
                self.loadDT(opB)

            if(opCD == 0x0029):
                self.loadFX(opB)
            elif(opCD == 0x0033):
                self.bcd(opB)
            elif(opCD == 0x0065):
                self.loadXI(opB)

        else:
            self.isRunning = False
            print("OpCode not implemented")


        print(self.toString())
        self.pc += 2

    def orx(self, x, y):
        self.v[x] = self.v[x] | self.v[y]
    def subn(self, x, y):
        if(self.v[y] > self.v[x]):
            self.v[y] -= self.v[x]
            self.v[0xF] = 1
        else:
            self.v[0xF] = 0
    def sub(self, x,y):
        if(self.v[x] > self.v[y]):
            print("Subtracting " + str(self.v[y]) + " from " + str(self.v[x]))
            self.v[x] -= self.v[y]
            self.v[0xF] = 1
        else:
            self.v[0xF] = 0
    def sne(self, v, x):
        if(self.v[v] != x):
            print("Skipping next instruction")
            self.pc += 2
        else:
            print("Ignoring skip")
    def se(self, x, y):
        if(self.v[x] == self.v[y]):
            print("Skipping next instruction")
            self.pc += 2
        else:
            print("Ignoring skip")
    def loadXDT(self, v):
        print("Placing delay timer value into register v[" + str(v) + "]")
        self.v[v] = self.dT
    def loadDT(self, v):
        print("Setting delay timer to " + str(v))
        self.dT = self.v[v]
    def loadFX(self, v):
        print("Fx29")
        self.i = 0x50 + (self.v[v] * 5)
    def loadXI(self, v):
        for i in range(0,v):
            print("Loading value " + str(int(self.memory[self.i+i])) + " into register v" + str(i))
            self.v[i] = int(self.memory[self.i+i])
    def jmp(self, x):
        print("Jumping to address: " + str(x))
        self.pc = x
    def sex(self, v, x):
        if(self.v[v] == x):
            print("Skipping next instruction")
            self.pc += 2
        else:
            print("Ignoring Skip")
    def ret(self):
        print("Returning from sub routine")
        self.pc = self.stack.pop()
        self.sp -= 1
    def add(self, v, x):
        print("Adding " + str(x) + " to register v["+ str(v) + "]" )
        self.v[v] += x
    def bcd(self, v):
        value = self.v[v]
        print("Storing value " + str(value) + " into memory locations{\n" + str(hex(self.i)) + ", " + str(hex(self.i+1)) + ", " + str(hex(self.i+2)))
        ones = value % 10
        tens = (value / 10) % 102
        hundreds = value / 100
        self.memory[self.i] = hundreds
        self.memory[self.i+1] = tens
        self.memory[self.i+2] = ones

    def call(self,n):
        print("Calling subroutine at address " + str(hex(n)))
        self.sp += 1
        self.stack.append(self.pc)
        self.pc = n

    def spriteCheck(self, x,y):
        print(self.pixels[y][x])
        return(self.pixels[y][x][1])
    def clr(self):
        for pixel in self.spriteData:
            canvas.delete(pixel[0])

    def sprite(self, x, y, n):
        x-=7
        x*=4
        y-=8
        y*=2

        if(x>63):
            x=math.floor(x/63)
        print("Drawing sprite at %d, %d with a height of %d"%(x,y,n))
        for byte_i in range(n):
            byte = [int(x) for x in '{:08b}'.format(self.memory[self.i+byte_i])]
            print("Reading byte #" + str(byte_i) + ":")
            print(byte)
            for bit_i in range(len(byte)):
                bit = byte[bit_i]
                print("Bit: " + str(bit))
                pixel = self.pixels[y+byte_i][x+bit_i]
                if(bit ^ pixel[1]):
                    print("Drawing Rectangle")
                    print("y*SCALE*byte_i = %d*%d*%d"%(y,SCALE,byte_i))
                    print("x*SCALE*(bit_i+1) = %d%d,%d"%(x,SCALE,bit_i))
                    #pixel = canvas.create_rectangle((x*SCALE)+(bit_i*SCALE), (y*SCALE)+(byte_i*SCALE),((x+1)*SCALE)+(bit_i*SCALE), ((y+1)*SCALE)+(byte_i*SCALE), fill='white')
                    canvas.itemconfig(pixel[0], fill='white')
                    pixel[1] = 1
                    #pixel = canvas.create_rectangle((x*SCALE)+(bit_i*SCALE), (y*SCALE)+(byte_i*SCALE),((x+1)*SCALE)+(bit_i*SCALE), ((y+1)*SCALE)+(byte_i*SCALE), fill='white')
                    #self.spriteData.append([pixel, x+bit_i, y+byte_i])
                    print("(%d,%d) -> (%d,%d)"%((x+1)*SCALE*(bit_i+1), y*SCALE*(byte_i+1),(x+1)*SCALE*(bit_i+1), (y+1)*SCALE*(byte_i+1)))
                else:
                    canvas.itemconfig(pixel[0], fill='black')
                    pixel[1] = 0
    def movL(self, v, x):
        print("Moving constant " + str(x) + " into register v["+str(v)+"]")
        self.v[v] = x

    def loadI(self, x):
        print("Loading constant " + str(x) + " into index register")
        self.i = x

    def toString(self):
        out = "Emulator Info:\n"
        out += "Current OpCode:" + str(hex(self.opCode)) + "\n"
        out += "vR[" + str(self.i) + "]\n"
        for i in range(len(self.v)):
            out = out + "v" + str(i) + "[" + str(self.v[i]) + "]\t"

        out = out + "\n" + "Program Counter: " + str(self.pc) + "\n" + "Stack Pointer: " + str(self.sp) + "\n"
        return out

emulator = Chip8Emulator()
emulator.loadROM(test2)
step = 0
while(emulator.isRunning):
    if(emulator.debugMode and step == 0):
        skip = input("Step#:")
        if(skip.isnumeric()):
            step = int(skip)
        else:
            step = 0
    else:
        time.sleep(emulator.clockSpeed)
    emulator.emulateCycle()
    window.update()
    step -= 1
    if(step < 0):
        step = 0
